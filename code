import cv2

#Load some pre-trained data on face frontals from opencv (haar cascade algorithm)
#CascadeClassifier is an effective object detection method which loads a classifier from a file
trained_face_data=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

#choose an image to detect faces in
#imread method loads an image from specified file
#The image should be in the working directory or a full path of image should be given.
cv2.namedWindow('Face Detector', cv2.WINDOW_NORMAL) #Creates a window with freedom of dimensions
#img = cv2.imread('messi.jpg') 

#to capture video from webcam.
#0 is for default webcam video.
webcam=cv2.VideoCapture(0, cv2.CAP_DSHOW)

#iterates forever over frames until the video ends
while True:
    #Read the current frame
    successful_frame_read, frame=webcam.read()
    #read() method will give us two things.
    #the first thing is whether the frame was read successfully(boolean).
    #the next thing is it gives the current frame(image)

    #must convert the image to grayscale
    grayscaled_img=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)

    #Detect faces
    #detectMultiScale detects objects of different sizes in the input image. The detected objects are returned as a list of rectangles.
    face_coordinates=trained_face_data.detectMultiScale(grayscaled_img)

    #Draw rectangles around the faces
    for (x, y, w, h) in face_coordinates:
        cv2.rectangle(frame,(x, y),(x+w,y+h),(0,255,0),2)

    cv2.imshow('Face Detector',frame)
    key=cv2.waitKey(1) #Display the image infinitely until any keypress
    #print(key) prints -1 everytime until q is pressed

    #stop if q key is pressed
    if key==81 or key==113:
        break
    
#release the videoCature object
webcam.release()

print("Code Completed")
